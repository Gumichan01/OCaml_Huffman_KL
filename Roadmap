
Roadmap projet OCaml - Compression de Huffman



==== COMPRESSION (DONE) ====

 -> Faire l'histogramme | DONE

 -> Faire l'arbre de Huffman | DONE

 -> Construire le fichier compressé | DOING

 -> Finir de construire la structure du fichier compressé 
	( mettre les '0' four arriver à une frontière d'octets + metre l'octet m + les m octets [ m >= 0 ]  ) | DONE

 -> Tester l'interopérabilité avec le décompresseur du prof | DONE

 -> Optimisation : Construire dynamiquement l'histogramme dès le parcours du fichier | DONE

 -> DEBUG : Re-modifier la fonctions de création d'histogramme (lecture ligne par ligne) | DOING

==== DECOMPRESSION ====

 -> Lire les octets magiques et vérifier | DONE

 -> Faire la lecture de l'arbre | DONE

 -> Lire les codes et ecrire dans le fichier texte décompressé | DONE

 -> Vérifier la validité du fichier texte -> $ md5sum sur le terminal | DONE

 -> Tester l'interopérabilité avec le compresseur du prof | DONE

 -> DEBUG : vérifier l'ignorance du programme vis-à-vis des octets à ignorer | DONE


==== Programme final  ====

 -> Compiler les fichiers .ml pour avoir les fichiers module .cmo | DOING

 -> Faire les fichiers .mli | DOING

 -> Faire le main.ml (gestion de paramètre positionnel ('-c', '-d, '-v', '-i' )) | TODO LAST
	Pas d'option -> compresser par défaut
	-x : extraire
	(Autres options possibles : Voir extension)
 	-v : mettre le md5 du fichier (ne marche que si '-c' est présent)
	-C : mettre des commentaires (même condition que pour '-v' et '-i')


DANS TOUS LES CAS, TESTER L'INTEROPERABILITE


==== EXTENSIONS ====

 Extensions possibles : 

 - Intégration de la checksum (md5) du fichier avant compression (avant l'arbre)

 - Prise en charge des commentaires (après le contenu) !!
